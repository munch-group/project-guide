
# Cluster set up

This page covers how you get set up on the GenomeDK cluster to do your project. First log in to the cluster:

```bash
ssh <cluster user name>@login.genome.au.dk
```

## Install Python on your cluster account

You need to install miniconda (a minimal Anaconda version) in your cluster home dir. Log in to the cluster and run this command to download the miniconda install script:

```bash
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
```

Then use this command to download and install miniconda:

```bash
bash Miniconda3-latest-Linux-x86_64.sh
```

Follow the default installation, and say **yes** when it asks you if it should run `conda init` for you.

**NP:** Now log out of the cluster and log back in. This is needed to make the `conda` command available to you.


## The project folder

The project folder is a folder that is set up on the cluster to hold your project. I call it `projectfolder` here, but it will be called something sensible like `baboonadmixture`.

It is accessible to only you and anyone else you collaborate with (such as your supervisor). The project folder is in your home directory and should hold the following subfolders:

    projectfolder
        /data
        /people
            /username
            /supervisor_username

The `<projectfolder>/people/<username>` is your domain. This is where you have all the files that relates to your project.

The name of the project folder is is also the name of the account that gets billed for the work on the cluster. When you run `srun`, `sbatch` or `slurm-jupyter` you must specify that project name using the `-A` or `--account` options (see below for more details on that). 



### Cloning this git repository to the cluster

Go to your folder under the project folder (`<projectfolder>/people/<username>`) and clone your repository:

```bash
git clone git@github.com:username/birc-project.git
```
(replace `username` with your GitHub username).

You now have a folder called `<projectfolder>/people/<username>/birc-project` and this is where you will do all your work for the project.

If you `cd` into `birc-directory` and run `ls`, you will see a number of folders.

- `data`: Stores *small* (tens of megabases) data files you want to keep .
- `binder`: Stores the `environment.yml` files documenting your conda environment used in the project.
- `sandbox`: Stores experiment and other files that are not yet part of your project workflow. This keeps the rest of the folder structure clean.
- `scripts`: Stores Python scripts that that produces intermediate and final results.
- `steps`: Stores intermediary files ("steps" on the way to final results).
- `notebooks`: Stores Juptyer notebooks with code, documentation, and results.
- `figures`: Stores result plots and figures you make.
- `results`: Stores the small result files of your project (tens of megabases).

Files in all those folders are under Git control, *except* files in the `steps` folder. Those files are not backed up in any way, but should instead be reproducible using the code and information in your other folders.

## The GitHub repository

<img src="https://github.githubassets.com/images/modules/open_graph/github-mark.png" align="right" width="200"  />

The text you are reading now is actually in a Git repository i made for you. 

[Git](https://git-scm.com/) is a version control tool that you use from the terminal. A folder under Git control is called a repository. Git does not interfere with your files and it does not save them. It lets you monitor the state of your files so you can easily see if any files are added, modified, or removed, and it allows you to (manually) maintain a record of what files where changes when, how, and for what reason. 

In addition to the documentation you are reading now, the repository serves as a template for your project. Follow these steps in order to get this repository:

1. Start by creating your own [github account](https://github.com/join) if you do not have one. 
2. Follow the instructions [on this page](https://www.inmotionhosting.com/support/server/ssh/how-to-add-ssh-keys-to-your-github-account/) to add ssh keys to GitHub.
3. Log in to your GitHub account on the web. Go to the [analysis-remplate-repo](https://github.com/kaspermunch/analysis-remplate-repo). Click the big green button that says "Use this template" and pick "Create new repository". You are then prompted for a name for your repository. Name it `birc-project`. Leave the rest as it is and click "Create repository". This will create your own copy of this repository on your own GitHub account.

Once your own `birc-project` repository is ready, find it on your own account, go to the repository front page. Look at the `cluster_setup.qmd` file in the `guides` folder. This is what renders into the page you are reading this from. You will learn later how to make such web pages yourself to document your work.

## Git 1.0.1

Start logging into the cluster and run these two commands to let Git know who you are:
```
git config --global user.name "<Your GitHub user name>"
git config --global user.email <your_email@whatever.com>
```

Note that to run git commands tracking your `birc-project`, . 

[These tutorials](https://www.atlassian.com/git) are good. The three most important commands to learn are [git status](https://git-scm.com/docs/git-status), [git add](https://git-scm.com/docs/git-add), [git rm](https://git-scm.com/docs/git-rm), [git commit](https://git-scm.com/docs/git-commit) and [git push](https://git-scm.com/docs/git-push). 

You should read the documentation, but in a nutshell this is how it works:

`git status` shows you the status of your files. It may show you that you have created or modified one or more files.

::: {.callout-tip}
## Tip

When you run git commands, you must be in your `birc-project` folder. Otherwise git will not know which repository you are referring to.
:::

To journal the creation or modification of a file, you run  `git add <the_changed_file>`. This "stages" the change. This adds the file to the a "group" of changes that represent some modification to your project. You can add more files to that "group" by running `git add` again. 

Maybe you added two python files that together lets you run some analysis. Now you want to store the group of changes to the journal maintained by Git and associate it with a description that describes it. For that you use `git commit -m 'description'`. If you added two python files, your description could be `'Added two python files for my analysis'`. Now your changes are recorded in the Git journal for the `birc-project` repository *on the cluster*, but that does not serve as a backup in case you accidentally delete your entire folder or the cluster burns down. 

To backup your repository you need to synchronize your local `birc-project` repository on your computer with the `birc-project` repository on GitHub. You do that using the `git push` command.

There is a cheat sheet [here](https://training.github.com/downloads/github-git-cheat-sheet/) and some good visual guides [here](https://ndpsoftware.com/git-cheatsheet.html) and [here](https://marklodato.github.io/visual-git-guide/index-en.html).

::: {.callout-important}
## Warning: Files on the cluster are not backed up!

Your files on the cluster are not backed up! If you want to backup files, you need to put them in a folder called BACKUP. But even if you do you may loose a week of work, since the backup loop is very slow. 
:::

The best/only way to keep your code safe is to track your files with git push each set of changes to GitHub as often as it makes sense. The more often you do it, the less work you will loose if you accidentally delete or overwrite a file.

We will get back to which files you should track using Git in @sec-reproducible-research on reproducible research.


## Create a conda environment

Log in to the cluster and run this command to create a conda environment for your project on the cluster. This environment should contain the packages that you need for your project. 


Create your environment like this:

```bash
conda env create -y -f binder/environment.yml
```

You probably end up needing more packages than is initially included, you can easily install them later. E.g., to see how to install `biopython` using `conda`, just google "conda biopython". The top link instructs you to install it like this: `conda install -c conda-forge biopython`.

**Important:** Whenever you log into the cluster to work on your project, you should activate your `birc-project` environment like this:

```bash
conda activate birc-project
```

 When your environment is active, it says `(birc-project)` on the command prompt instead of `(base)`.


### Set up Jupyter

<img src="https://github.com/jupyter/jupyter.github.io/blob/master/assets/main-logo.svg" align="right" width="100" height="100" />

[Jupyter](https://jupyter.org/) is a notebook environment where you can easily combine text, code, and plots. Using the [slurm-jupyter](https://slurm-jupyter.readthedocs.io/en/latest) tool, you can run a jupyter notebook on the cluster but see it in the browser on your own machine. That way, your analysis runs on the cluster file system where your data is but the notebook interface is sent to your browser window. 

Before you can connect to a jupyter session on the cluster, you need to do a bit of configuration of the jupyter settings on the cluster. `slurm-jupyter` comes with script that automates that procedure. Just log into the cluster, activate your environment, and run:

```bash
config-slurm-jupyter.sh
```

The script will ask for a lot of information. You can just press `Enter` for all of them **except** when prompted for what password you want to use: Then, you must type your cluster password.



### Visual Studio Code

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Visual_Studio_Code_1.35_icon.svg/2560px-Visual_Studio_Code_1.35_icon.svg.png" align="right" width="100" height="100" />

If you did not do so when you installed Anaconda, you should download and install Visual Studio Code. VScode is great for developing scripts and editing text files. Once you have installed VS code, you should install the "Remote Development" extension. You do that by clicking the funny squares in the left bar and search for "Remote Development". Once installed, you can click the small green square in the lower-left corner to connect to the cluster. Select "Connect current window to host" then "Add new SSH host", then type `<username>@login.genome.au.dk`, then select the config file `.ssh/config`. Now you can click the small green square in the lower-left corner to connect to the cluster by selecting `login.genome.au.dk`. It may take a bit, but once it is done installing a remote server, you will have access to the files in your home folder on the cluster.

### How to run a Jupyter notebook on the cluster

Jupyter runs best in the [Chrome browser](https://www.google.com/chrome) or Safari on Mac. For the best experience, install that before you go on. It does not need to be your default browser. `slurm-jupyter` will use it anyway. Now make sure you are on your own machine and that your `popgen` environment is activated. Then run this command to start a jupyter notebook on the cluster and send the display to your browser:

```bash
slurm-jupyter -C -u <cluster_user_name> -A <projectfolder<> -e birc-project
```

(replace `<cluster_user_name>` with your cluster user name, `<projectfolder>` with your project folder name.

Watch the terminal to see what is going on. After a while, a jupyter notebook should show up in your browser window. The first time you do this, your browser may refuse to show jupyter because the connection is unsafe. In Safari you are prompted with this winidow where you click "details":

<img src="img/mac_warning1.png" alt="image" width="450"/>

Then you get this window and click "visit this website":

<img src="img/mac_warning2.png" alt="image" width="450"/>

In Chrome, you can simply type the characters "thisisunsafe" while in the Chrome window:

<img src="img/thisisunsafe.png" alt="image" width="450"/>

Once ready, jupyter may ask for your cluster password. To close the jupyter notebook, press `Ctrl-c` in the terminal. Closing the browser window does **not** close down the jupyter on the cluster. You can [read this tutorial](https://www.dataquest.io/blog/jupyter-notebook-tutorial/) to learn how to use a jupyter notebook.

### Running interactive commands on the cluster

When you log into the cluster, you land on the "front-end" of the cluster. Think of it as the lobby of a giant hotel. If you execute the `hostname` command, you will get `fe-open-01`. `fe1` is the name of the front-end machine. The "front-end" is a single machine shared by anyone who logs in. So you cannot run resource-intensive jobs there, but quick commands are ok. Commands that finish in less than ten seconds are ok. In the exercises for this course, you will run software that takes a much longer time to finish. So you need one of the computing machines on the cluster, so you can work on that instead. You ask for a computing machine by running this command:

```bash
srun --mem-per-cpu=1g --time=3:00:00 --account=<projectfolder> --pty bash
```

That says that you need at most one gigabyte of memory, that you need it for at most three hours (the duration of the exercise), and that the computing expenses should be billed to the project `<projectfolder>`. When you execute the command, your terminal will say "srun: job 40924828 queued and waiting for resources". That means that you are waiting for a machine. Once it prints "srun: job 40924828 has been allocated resources", you have been logged into a computing node. If you execute the `hostname` command, you will get something like `s05n20`. `s05n20` is a computing machine. The same way you moved from your own computer to front-end machine of the cluster by logging in using ssh, the command above moves you from the front-end to a compute machine. Now you can execute any command you like without causing trouble for anyone.

Now try to log out of the compute node by executing the `exit` command or by pressing `Ctrl-d`. If you execute the `hostname` command again, you will get `fe1.genomedk.net` showing that you are back at the front-end machine.

### Queueing commands on the cluster

For non-interactive work, it is better to submit your command as a job to the cluster. When you do that, the job gets queued along with many other jobs, and as soon as the requested resources are available on the cluster, the job will start on one the many many machines. To submit a job, you must first create a file (a "batch script") that contains both the requested computer resources and the command you want to run. 

Create a file called `myscript.sh` with exactly this content:

```bash
#!/bin/bash
#SBATCH --mem=1gb
#SBATCH --time=01:00:00
#SBATCH --account=<projectfolder>
#SBATCH --job-name=firstjob

echo "I can submit cluster jobs now!" > success.txt
```
(replace `<projectfolder>` with your project folder name)

The first line says this is a bash script, the lines following three lines say that your job needs at most one gigabyte of memory, will run for at most one hour, that the expenses should be billed to the project `<projectfolder>`. The fourth line gives the name of the job. Here we have called it `firstjob`, but you should name it something sensible. 

You submit the job using the `sbatch` command: 

```bash
sbatch myscript.sh
```

Now your job is queued. Use the `mj` command to see what jobs you have queued or running. That will show something like this:

```txt
                                                                        Alloc
Job ID           Username Queue    Jobname    SessID NDS  S Elap Time   nodes
---------------- -------- -------- ---------- ------ ---  - ----------  -----
34745986         kmt      normal   firstjob       --   1  R 0-00:19:27  s03n56
```

If you want to cancel this job before it finishes, you can use the `scancel` command:

```bash
scancel 34745986
```

Once your job finishes, it has created the file `success.txt` and written "I can submit cluster jobs now!" to it. So see that you can use the `cat` command:

```bash
cat success.txt
```

When you a program or script on the command line, it usually also prints some information in the terminal. When you run a job on the cluster there is no terminal to print to. Instead, this is written to two files that you can read when the job finishes. In this case, the fiels are called `firstjob.stdout` and `firstjob.stderr`. To see what is in them, you can use the `cat` command:

```bash
cat firstjob.stdout
```

and

```bash
cat firstjob.stderr
```

That is basically it. 

### How to copy files to and from the cluster

You may need to transfer files back and forth between your own machine and the cluster. To copy a file called `file` in a directory called `dir` on the cluster to the current folder on your own machine, you can use the `scp` command:

```bash
scp <cluster_user_name>@login.genome.au.dk:dir/file .
```

To copy a file called `file` in the current folder on your own machine to a folder called `dir` on the cluster, you do this:

```bash
scp ./file <cluster_user_name>@login.genome.au.dk:dir/
```


